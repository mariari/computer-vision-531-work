#+LATEX_HEADER: \usepackage[margin=1.0in]{geometry}
* Defining the Flow field
** With a convolution
- So the plan with this one is to have a n by n window that goes
  around the first image, while for every n by n patch, we look at m
  by m area of the second area of the second image to find the best
  match (an area that minimizes the mean squared difference).
- In order to do this I wanted to get the degrees of the movement in
  terms of a full 360 degrees.
  #+BEGIN_SRC haskell
    degrees :: (Ord a, Floating a, Eq a) ⇒ a → a → a
    degrees 0    0   = 0
    degrees rise 0
      | rise > 0     = 90
      | otherwise    = 180
    degrees rise run
      | rise ≥ 0 ∧ run > 0 = calc
      | rise > 0 ∧ run < 0 = calc + 90
      | rise ≤ 0 ∧ run < 0 = calc + 180
      | rise < 0 ∧ run > 0 = calc + 270
      where calc = abs $ atan (rise / run) * 180 / pi
  #+END_SRC
  + here we only really have a few cases which are all self
    explanatory.
- Now that we got that out of the way, we shall now talk about the
  main function
  #+BEGIN_SRC haskell
    convfn n m img1 img2 = R.fromFunction newSize f
      where
        sideSize        = n `div` 2
        edgeSize        = m * n + sideSize
        Z :. i :. j     = extent img1
        newSize         = ix2 (i `div` edgeSize) (j `div` edgeSize) -- this gives the boundary so we stay inside the image
        f (Z :. x :. y) = comp
          where
            centerX     = edgeSize + x * n
            centerY     = edgeSize + y * n
            fromMid ι κ = ix2 (centerX + ι) (centerY + κ)
            extractImg  = extract (fromMid 0 0) (ix2 n n)
            current     = R.computeUnboxedS $ extractImg img1
            sameSpotOn2 = R.computeUnboxedS $ extractImg img2
            comp | current == sameSpotOn2 = 0
                 | otherwise              = uncurry degrees added
            -- if the image moved at all then we have to add everything to a priority queue
            added = (fromIntegral lowestI, fromIntegral lowestJ)
              where
                (lowestI, lowestJ) = peek $ foldr insertPQ empty allspots
                allspots           = (,) <$> [negate n*m .. n*m] <*> [negate n*m .. n*m] -- get all points
                insertPQ (ι,κ)     = add diff (ι,κ)
                  where
                    diff = meanDiff current (extract (fromMid ι κ) (ix2 n n) img2)
  #+END_SRC
  + so we are going to take this function line by line in order to
    understand how it works
  + _=R.fromFunction newSize f=_
    * This line is creating an array with size =newSize= with default
      values defined by a function f that takes coordinates and
      constructs the point
      - Note that every point is therefore independent and thus can be
        computed in parallel
  + _sideSize = n `div` 2_
    * here edgeSize is how much an edge goes to either size from the
      middle, so if our n is 3, then its side size is 1
  + _edgeSize = m * n + sideSize_
    * this part is a little trick, so I don't want the m by m window
      to go off the edge of the image, so instead of doing bounds
      checking for edge points, I just ignore the size of n m times and
      the raidus of n.
  + i and j here are just the =extent= (size) of the first image, n and m
    are already taken, so i and j is the next best bet!
  + _newSize = ix2 (i `div` edgeSize) (j `div` edgeSize)_
    * with all these constants defined, we can now define the size of
      the the output array. Here we just divide i and j by the edgeSize
      and make a new DIM2 shape
  + _f (Z :. x :. y) = comp_
    * This is the function that will populate the array, since we now
      have the x and y coordinates, we can start to define what this
      function does
    * _centerX  centerY_
      + these constants just compute where in the image we are
    * _fromMid ι κ = ix2 (centerX + ι) (centerY + κ)_
      + this is just an abstraction that adds a distance from the
        middle and generates a shape
    * _extractImg = extract (fromMid 0 0) (ix2 n n)_
      + this is yet again another image that takes an array and takes a
        n by n patch from the middle
    * _current = R.computeUnboxedS $ extractImg img1_
      - Now we finally have the n by n patch from the first image that
        we wish to test against
    * So instead of doing a lot of extra work, we define =sameSpotOn2=
      which grabs the same location in image2, as we can see that in
    * _comp ... = ..._
      - that if the current patch is the same as the same patch in
        image 2, then we just give back 0, otherwise we do =uncurry degrees added=
        which just calls degrees on added
    * _added = (fromIntegral lowestI, fromIntegral lowestJ)_
      + the end result of added is just the min over the m by m window
        but to see why, we must see the functions inside of added
    * _allspots = (,) <$> [negate n*m .. n*m] <*> [negate n*m .. n*m]_
      - Here we are doing a little fun trick, where we generate the
        range -n*m to n*m and then using map (<$>) to make the entire
        range a 1 argument function
        * (,) <$> [-2..2] : (Enum a, Num a) ⇒ [b → (a, b)]
      - and then we use the applicative (one can think of the
        applicative =<*>= as the cross product that does any arbitrary
        functions instead of just ,) we get every combination of -n*m
        to n*m
        * (,) <$> [-1..1] <*> [-1..1] = [(-1,-1),(-1,0),(-1,1),(0,-1),(0,0),(0,1),(1,-1),(1,0),(1,1)]
    * _insertPQ (ι,κ) = add diff (ι,κ)_
      - =diff = meanDiff current (extract (fromMid ι κ) (ix2 n n) img2)=
      - I'm going to fold on the above range, but to do so, we must
        first make a function that takes a single element of the range
        and adds it to a priority queue. and to do this we just take the
        meanDiff (defined after this code block section) between the
        current patch and the new patch around the points ι and κ
      - After we get this diff we add the diff as the key with the
        value pair (ι,κ)
    * Now that we got all this work out of the way we can make sense
      of
    * _(lowestI, lowestJ) = peek $ foldr insertPQ empty allspots_
      - This function just folds over allspots (the generalized) cross
        product and starts with an initially empty priority queue with
        the insertPQ function, now that everything is added to the
        priority queue, we can now just peek at the queue and take what
        is lowest in value (lowest in the mean squared difference)
  + With all these functions defined now f is defined and the entire
    function just works! and if one is still confused, try re-reading
    from top to bottom again, now that you know what each little
    function/constant means
- I did a few test cases for this, so I'll include 1 of them
  #+BEGIN_SRC haskell
    computeUnboxedS (convfn 3 1 (fromListUnboxed (Z :. (10 :: Int) :. (10 :: Int)) [0..99])
                                (fromListUnboxed (Z :. (10 :: Int) :. (10 :: Int)) [0..99]))
  #+END_SRC
  + and thankfully it gave me back the correct size of the output
    * AUnboxed ((Z :. 2) :. 2) [0.0,0.0,0.0,0.0]
- The only thing left to define is the meanDiff I used in convfn
  #+BEGIN_SRC haskell
    meanDiff :: (Source r c, Source r2 c, Floating c) ⇒ Array r DIM2 c → Array r2 DIM2 c → c
    meanDiff as = √ ∘ (/ fromIntegral (i * j)) ∘ sumAllS ∘ R.zipWith (\x y → abs (x^2 - y^2)) as
      where Z :. i :. j = R.extent as
  #+END_SRC
  + meanDiff just takes 2 arrays and basically just runs the formula
    RMSE(a,b) = $\sqrt{\frac{\sum_{t=0}^{n-1}((a_t - b_t)^{2})}{n}}$
** With Gradient constraint
*** Computing the discrete derivative
- Well to calculate I we just need to calculate Δt, Δx, and Δy. For Δx and
  Δy, we can just take the sobel filter for the x direction and the y
  direction (this serves the same as checking the change in the x and y
  direction).
  #+BEGIN_SRC haskell
    sobelEdgeX = [stencil2| -1 0 1
                            -2 0 2
                            -1 0 1|]


    sobelEdgeX7 = [stencil2| 3   2   1   0   -1  -2  -3
                             4   3   2   0   -2  -3  -4
                             5   4   3   0   -3  -4  -5
                             6   5   4   0   -4  -5  -6
                             5   4   3   0   -3  -4  -5
                             4   3   2   0   -2  -3  -4
                             3   2   1   0   -1  -2  -3|]

    sobelX7 :: (Source r b, Num b) ⇒ Array r DIM2 b → Array PC5 DIM2 b
    sobelY7 :: (Source r b, Num b) ⇒ Array r DIM2 b → Array PC5 DIM2 b
    sobelX7 = mapStencil2 BoundClamp sobelEdgeX7
    sobelY7 = mapStencil2 BoundClamp sobelEdgeY7
  #+END_SRC
  + Here is an example definition of a size 7 sobel kernel and a size 3
    sobel kernel in the x direction, and can apply the sobel by just
    using mapstencil with a bounded clamp

- Now that we have those defined we can now define the change in x and y
  with varying kernel size with the following
  #+BEGIN_SRC haskell
    data WindowSize = Window3
                    | Window5
                    | Window7

    δx :: (Num b, Source r b) ⇒ WindowSize → Array r DIM2 b → Array PC5 DIM2 b
    δx Window3 = sobelX
    δx Window5 = sobelX5
    δx Window7 = sobelX7

    δy :: (Num b, Source r b) ⇒ WindowSize → Array r DIM2 b → Array PC5 DIM2 b
    δy Window3 = sobelY
    δy Window5 = sobelY5
    δy Window7 = sobelY7
  #+END_SRC
- Since I'm using hardcoded sobel values instead of a generalized
  version, I make a type called WindowSize that will be used to
  dispatch on size request
- From Here the Δx and Δy become fully realized as they are just
  different kernel size of the sobel
- dt is also simple
  #+BEGIN_SRC haskell
    δt :: (Shape sh, Source r1 c, Source r2 c, Num c)
          ⇒ Array r1 sh c → Array r2 sh c → Array D sh c
    δt = (-^)
  #+END_SRC
  + this function simply just does elementwise subtraction from each pixel
- Now that we have these functions define, we now have A and b also
  defined, we can trivially define a function that grabs it for us
  #+BEGIN_SRC haskell
    ab :: (Num e, Source r1 e, Source r e)
       ⇒ WindowSize
       → Array r DIM2 e
       → Array r1 DIM2 e
       → (Array D DIM2 e, Array D DIM1 e)
    ab windowSize img img2 = (diffb, difft)
      where (_ :. i :. j) = R.extent img
            diffb = reshape (ix2 (i*j) 2) $ interleave2 diffx diffy
            diffx = op $ δx windowSize
            diffy = op $ δy windowSize
            difft = op $ R.map negate . δt img2
            op f  = reshape (ix1 (i*j)) (f img)
  #+END_SRC
  * so here we just define =op= which just calls reshape on apply our
    function to the image

  * For δx and δy this is rather straight forward, we pass forward the
    windowSize information and create our 0^th and 1^th position of our
    2d array with 2 columns. After we do this we can combine Δx and Δy
    with diffb which just interleaves the elements (places the 1st x
    after the first y and the 2nd x after the second y... etc etc).

  * As for the Δt, we just map negation on the entire array after
    applying δt
* Plotting
- I didn't have time to figure out a plotting lib in time (nor finding
  the one Ι found previously), so there will be no flow comparison, and
  for that I do apologize. due to how the code is set up, it would be
  trivially to mess with the numbers going into this